@page "/przedmioty/{id:int}"
@using Services
@using Models
@inject IPrzedmiotyService przedmiotyService
@inject IComponentService componentService
@inject IKomponentyPrzedmiotowService komponentyService
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager

<PageTitle>@item.Nazwa</PageTitle>
<h3>
	@item.Nazwa 
	<AuthorizeView Roles="Administrator">
		<Authorized>
			<button class="btn btn-primary oi oi-pencil" @onclick="(() => ShowEditItem(id))"></button>
		</Authorized>
	</AuthorizeView>
</h3>

<table class="table">
	<thead>
		<tr>
			<th>Ikona</th>
			<th>Statystyki</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>
				<img src="@item.Ikona" width="64px" height="64px"/>
			</td>
			<td>@((MarkupString)@item.Statystyki)</td>
		</tr>
	</tbody>
</table>


@if(components.Count >= 1)
{
	<label>
	<h4>Komponenty:</h4>
		<table class="table">
			<thead>
				<tr>
					<th></th>
					<th></th>
					<th></th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var component in components)
				{
					<tr>
						<td>
							<img src="@przedmiotyService.GetById(component.id_przed).Ikona" width="64px" height="64px" @onclick="(() =>ShowItem(component.id_przed))" />
						</td>
						<td>
							<a href="#" @onclick="(() =>ShowItem(component.id_przed))">@przedmiotyService.GetById(component.id_przed).Nazwa</a>
						</td>
						<td>
							<AuthorizeView Roles="Administrator">
								<Authorized>
									<button class="btn btn-primary oi oi-pencil" @onclick="(() => ShowEditComponent(component.id))"></button>
								</Authorized>
							</AuthorizeView>
							
						</td>
						<td>
							<AuthorizeView Roles="Administrator">
								<Authorized>
									<button class="btn btn-danger oi oi-trash" @onclick="async ()=> await DeleteComponent(component.id)"></button>
								</Authorized>
							</AuthorizeView>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</label>
}


<br />
<AuthorizeView Roles="Administrator">
	<Authorized>
		<button class="btn btn-primary" @onclick="(() => ShowAddComponent(item.IdPrzed))">Dodaj komponent</button>
	</Authorized>
</AuthorizeView>

<br />
<h3>@message</h3>
<br />
<br />



@code {
	[Parameter]
	public int id { get; set; }
	Przedmioty item = new();
	List<Component> components = new();
	List<KomponentyPrzedmiotow> komponenty = new();
	private string message = string.Empty;

	protected override void OnInitialized()
	{
		item = przedmiotyService.GetById(id);
		components = componentService.GetComponents(id);
		komponenty = komponentyService.GetAll();
		base.OnInitialized();
	}

	private void ShowEditItem(int id)
	{
		navManager.NavigateTo($"/przedmioty/{id}/edytuj");
	}

	private void ShowAddComponent(int idPrzed)
	{
		navManager.NavigateTo($"/przedmioty/komponenty/dodaj/{idPrzed}");
	}

	private void ShowEditComponent(int id)
	{
		navManager.NavigateTo($"/przedmioty/komponenty/{id}/edytuj");
	}

	private void ShowItem(int id)
	{
		navManager.NavigateTo($"/przedmioty/{id}", true, true);
	}

	private async Task DeleteComponent(int idKomponentu)
	{
		bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Czy jesteś pewien, że chcesz usunąć kontrę?");
		if (confirmed)
		{
			if (komponentyService.Delete(idKomponentu))
			{
				message = "Pomyślnie usunięto!";
				navManager.NavigateTo($"/przedmioty/{id}", true);
			}
			else
				message = "Nie udało się usunąć.";
		}
	}
}
