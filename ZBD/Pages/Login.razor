@page "/login"
@using ZBD.Authentication
@using ZBD.Models;
@using ZBD.Services
@inject IJSRuntime js
@inject IDaneLogowaniaService daneLogowaniaService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>Nazwa użytkownika</label>
            <input @bind="model.UserName" class="form-control" placeholder="Nazwa użytkownika" />
        </div>
        <div class="mb-3">
            <label>Hasło</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Hasło" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Zaloguj</button>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Register" class="btn btn-secondary">Utwórz nowe konto</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        DaneLogowania? userAccount = daneLogowaniaService.GetUserByName(model.UserName);
        if (userAccount == null || userAccount.Haslo != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Podano niepoprawną nazwę użytkownika lub hasło");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.Nick,
                Role = userAccount.Rola
            });
        navManager.NavigateTo("/gracze/" + userAccount.Nick, true);

    }

    private async Task Register()
    {
        navManager.NavigateTo("/register");
    }
}
